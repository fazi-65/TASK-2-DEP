// Contact.h
#ifndef CONTACT_H
#define CONTACT_H

#include <string>

class Contact {
public:
    Contact(std::string name, std::string phone);
    std::string getName() const;
    std::string getPhone() const;

private:
    std::string name;
    std::string phone;
};

#endif // CONTACT_H
// Contact.cpp
#include "Contact.h"

Contact::Contact(std::string name, std::string phone)
    : name(name), phone(phone) {}

std::string Contact::getName() const {
    return name;
}

std::string Contact::getPhone() const {
    return phone;
}
// main.cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include "Contact.h"

void addContact(std::vector<Contact>& contacts);
void viewContacts(const std::vector<Contact>& contacts);
void deleteContact(std::vector<Contact>& contacts);

int main() {
    std::vector<Contact> contacts;
    int choice;

    do {
        std::cout << "Contact Management System\n";
        std::cout << "1. Add Contact\n";
        std::cout << "2. View Contacts\n";
        std::cout << "3. Delete Contact\n";
        std::cout << "4. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 1: addContact(contacts); break;
            case 2: viewContacts(contacts); break;
            case 3: deleteContact(contacts); break;
            case 4: std::cout << "Exiting...\n"; break;
            default: std::cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 4);

    return 0;
}

void addContact(std::vector<Contact>& contacts) {
    std::string name, phone;
    std::cout << "Enter name: ";
    std::cin >> name;
    std::cout << "Enter phone number: ";
    std::cin >> phone;
    contacts.emplace_back(name, phone);
    std::cout << "Contact added successfully!\n";
}

void viewContacts(const std::vector<Contact>& contacts) {
    std::cout << "Contacts:\n";
    for (const auto& contact : contacts) {
        std::cout << "Name: " << contact.getName() << ", Phone: " << contact.getPhone() << "\n";
    }
    if (contacts.empty()) {
        std::cout << "No contacts available.\n";
    }
}

void deleteContact(std::vector<Contact>& contacts) {
    std::string name;
    std::cout << "Enter the name of the contact to delete: ";
    std::cin >> name;

    auto it = std::remove_if(contacts.begin(), contacts.end(), [&](const Contact& c) {
        return c.getName() == name;
    });

    if (it != contacts.end()) {
        contacts.erase(it, contacts.end());
        std::cout << "Contact deleted successfully!\n";
    } else {
        std::cout << "Contact not found.\n";
    }
}
